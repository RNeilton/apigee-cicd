# Starter pipeline
trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - azure-pipelines.yml
pool:
  vmImage: 'ubuntu-latest'

variables:
  api_name: 'hr-api'
  proxy_name: 'apiproxy'
  enable_test: 'false'
  enable_dev_deploy: 'false'

stages:
#- stage: Push_GIT
#  jobs:
#  - job: GIT
#    steps:
#    - task: NodeTool@0
#      inputs:
#        versionSpec: '10.x'
#    - script: |
#        echo "Maven"
        
#      displayName: Test
#  - task: Shellpp@0
#     inputs:
#       type: 'InlineScript'
#       scriptPath: '$(Build.ArtifactStagingDirectory)'
#       script: |
#         pwd
#         ls -lR
#     displayName: Directory
- stage: Build
  jobs:
  - job: Authentication
    steps:
    - task: Shellpp@0
      inputs:
        type: 'InlineScript'
        script: |
          echo "start of the authentication process"
          if [ -z "$refresh_token"]
          then
          echo "Using username and password"
          token_data=$(curl -H "Content-Type: application/x-www-form-urlencoded;charset=utf-8" -H "accept: application/json;charset=utf-8" -H "Authorization: Basic $(AUTHORIZATION_TOKEN)" -X POST $(ENDPOINT_OAUTH) -s -d "grant_type=password&username=$(DEV_MACHINE_USER)&password=$(DEV_MACHINE_USER_PASSWORD)")
          access_token=$(jq -r '.access_token' <<< "${token_data}" ) 
          refresh_token=$(jq -r '.refresh_token' <<< "${token_data}" )
          else
          echo "using refresh_token"
          echo $refresh_token
          token_data_refresh=$(curl -H "Content-Type: application/x-www-form-urlencoded;charset=utf-8" -H "Accept: application/json;charset=utf-8" -H "Authorization: Basic $(AUTHORIZATION_TOKEN)" -X POST $(ENDPOINT_OAUTH) -s -d "grant_type=refresh_token&refresh_token=$refresh_token ")
          access_token=$(jq -r '.access_token' <<< "${token_data_refresh}" ) 
          echo $token_data_refresh
          fi
          echo $access_token
      displayName: Credentials
  - job: CodeAnalysis
    dependsOn: Authentication
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
    - script: |
        npm install -g apigeelint
        apigeelint -s $(api_name)/$(proxy_name)/ -f table.js
        test_report=$(apigeelint -s $(api_name)/$(proxy_name)/ -f junit.js)
        echo $test_report > test-report.xml
      displayName: CodeAnalysis
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Apigee CodeAnalysis'
  - job: Test
    dependsOn: CodeAnalysis
    condition: eq(variables.enable_test, true)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
    - script: |
        npm install 
        npm test test/unit/*.js
        npm run coverage test/unit/*.js
      displayName: Test
  - job: RestoreMaven
    dependsOn: CodeAnalysis
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: $(api_name)/pom.xml
        publishJUnitResults: false
        goals: 'package'
      displayName: Package Proxy
    - task: CopyFiles@2
      inputs:
        Contents: $(api_name)/target/*.zip
        TargetFolder: $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: drop
        publishLocation: 'Container'

- stage: CD_DEV
  jobs:
  - job: Deploy
    condition: eq(variables.enable_dev_deploy, true)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
    - script: |
        echo "Maven"
        
      displayName: Test

- stage: CD_UAT
  jobs:
  - job: Deploy
    steps:
    - task: Shellpp@0
      inputs:
        type: 'InlineScript'
        script: |
          echo "start of the authentication process"
          if [ -z "$refresh_token"]
          then
          echo "Using username and password"
          token_data=$(curl -H "Content-Type: application/x-www-form-urlencoded;charset=utf-8" -H "accept: application/json;charset=utf-8" -H "Authorization: Basic $(AUTHORIZATION_TOKEN)" -X POST $(ENDPOINT_OAUTH) -s -d "grant_type=password&username=$(DEV_MACHINE_USER)&password=$(DEV_MACHINE_USER_PASSWORD)")
          access_token=$(jq -r '.access_token' <<< "${token_data}" ) 
          refresh_token=$(jq -r '.refresh_token' <<< "${token_data}" )
          else
          echo "using refresh_token"
          echo $refresh_token
          token_data_refresh=$(curl -H "Content-Type: application/x-www-form-urlencoded;charset=utf-8" -H "Accept: application/json;charset=utf-8" -H "Authorization: Basic $(AUTHORIZATION_TOKEN)" -X POST $(ENDPOINT_OAUTH) -s -d "grant_type=refresh_token&refresh_token=$refresh_token ")
          access_token=$(jq -r '.access_token' <<< "${token_data_refresh}" ) 
          echo $token_data_refresh
          fi
          echo $access_token
      displayName: Credentials
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
    - script: |
        echo "Maven"
        
      displayName: Test

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'
    - task: Shellpp@0
      inputs:
        type: 'InlineScript'
        scriptPath: '$(Build.ArtifactStagingDirectory)'
        script: |
          pwd
          ls -lR
      displayName: Directory
    - task: Maven@3
      inputs:
        mavenPomFile: $(api_name)/pom.xml
        goals: 'install'
        options: '-P test -Dhosturl=$(hosturl) -Dorg=$(org_name) -Dusername=$(dev_machine_user) -Dpassword=$(dev_machine_user_password) -Dapigee.config.options=none -Dapigee.config.dir=$(Pipeline.Workspace)/drop/hr-api/target/HR-API-1.0.zip -X' 
#- stage: CD_DEV
#  jobs:
#  - deployment: DeployK8S
#    displayName: Dev
#    strategy:
#      runOnce:
#        preDeploy:
#           steps:
#            - task: Shellpp@0
#              inputs:
#                type: 'InlineScript'
#                script: |
#                  echo "start of the authentication process"
#                  if [ -z "$refresh_token"]
#                  then
#                  echo "Using username and password"
#                  token_data=$(curl -H "Content-Type: application/x-www-form-urlencoded;charset=utf-8" -H "accept: application/json;charset=utf-8" -H "Authorization: Basic $(AUTHORIZATION_TOKEN)" -X POST $(ENDPOINT_OAUTH) -s -d "grant_type=password&username=$(DEV_MACHINE_USER)&password=$(DEV_MACHINE_USER_PASSWORD)")
#                  access_token=$(jq -r '.access_token' <<< "${token_data}" ) 
#                  refresh_token=$(jq -r '.refresh_token' <<< "${token_data}" )
#                  else
#                  echo "using refresh_token"
#                  echo $refresh_token
#                  token_data_refresh=$(curl -H "Content-Type: application/x-www-form-urlencoded;charset=utf-8" -H "Accept: application/json;charset=utf-8" -H "Authorization: Basic $(AUTHORIZATION_TOKEN)" -X POST $(ENDPOINT_OAUTH) -s -d "grant_type=refresh_token&refresh_token=$refresh_token ")
#                  access_token=$(jq -r '.access_token' <<< "${token_data_refresh}" ) 
#                  echo $token_data_refresh
#                  fi
#                  echo $access_token
#              displayName: Credentials
#        deploy:
#          steps: 
#            - task: Shellpp@0
#              inputs:
#                type: 'InlineScript'
#                scriptPath: '$(Build.ArtifactStagingDirectory)'
#                script: |
#                  pwd
#                  ls -lR
#              displayName: Directory
#            - task: Maven@3
#              inputs:
#                mavenPomFile: 'pom.xml'
#                goals: 'install'
#                options: '-p' 


